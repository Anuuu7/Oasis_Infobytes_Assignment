# -*- coding: utf-8 -*-
"""OIBSIP( iris flower classification,).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N67CzGkrAK1aRCzgBpSLd2TxDwA_OJru
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load the dataset
url = "https://raw.githubusercontent.com/amankharwal/Website-data/master/IRIS.csv"
df = pd.read_csv(url)

# Preprocess the data
X = df.drop('species', axis=1)
y = df['species']

# Convert species labels to numerical values
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Choose a machine learning algorithm and train the model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Evaluate the model's performance
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Print classification report and confusion matrix
print("Classification Report:")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

# Plot the data using scatter plots
species_mapping = {0: 'Setosa', 1: 'Versicolor', 2: 'Virginica'}
species_colors = {0: 'red', 1: 'green', 2: 'blue'}

for feature1 in X.columns:
    for feature2 in X.columns:
        if feature1 != feature2:
            plt.figure(figsize=(8, 6))
            for species_idx, species_name in species_mapping.items():
                species_mask = y == species_idx
                plt.scatter(X[feature1][species_mask], X[feature2][species_mask], c=species_colors[species_idx], label=species_name)
            plt.xlabel(feature1)
            plt.ylabel(feature2)
            plt.legend()
            plt.show()